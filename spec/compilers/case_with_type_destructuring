type A(a) {
  B(a)
}

type C(a) {
  D(A(a))
  X
}

component Main {
  fun render : String {
    case (C.D(A.B(""))) {
      C.X => ""
      C.D(a) =>
        case (a) {
          A.B(c) =>
            c
        }
    }

    ""
  }
}
--------------------------------------------------------------------------------
import {
  patternVariable as E,
  newVariant as C,
  pattern as D,
  variant as A,
  match as B
} from "./runtime.js";

export const
  F = A(1, `A.B`),
  G = A(1, `C.D`),
  H = A(0, `C.X`),
  I = () => {
    B(C(G)(C(F)(``)), [
      [
        D(H, []),
        () => {
          return ``
        }
      ],
      [
        D(G, [E]),
        (a) => {
          return B(a, [[
            D(F, [E]),
            (b) => {
              return b
            }
          ]])
        }
      ]
    ]);
    return ``
  };
